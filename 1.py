import pygame, sys, math, itertools, random
pygame.init()
WIDTH, HEIGHT = 800, 600           # Window
TILE = 32                           # Grid size
FPS = 60
GRAVITY = 0.55
SCROLL_EDGE = WIDTH // 3           # Camera starts scrolling after this x

# ---------- helper: palette & procedural gfx ----------
def solid(color, w=TILE, h=TILE):
    surf = pygame.Surface((w, h))
    surf.fill(color)
    return surf

PAL = {
    "sky":  (145, 202, 255),
    "brick":(155, 118, 83),
    "grass":(88, 200, 70),
    "coin": (255, 219, 88),
    "player":(234, 92, 68),
    "flag": (255,255,255)
}

IMG = {
    "#": solid(PAL["brick"]),
    "G": solid(PAL["grass"]),
    "C": solid(PAL["coin"]),
    "F": solid(PAL["flag"]),
}

# ---------- level data (5 worlds × 3 tiny demo levels) ----------
WORLD_DATA = [
  [  # world 1
    [
      "................................................................",
      "................................................................",
      ".......................................................C........",
      ".................................####................########F..",
      "............C...................................................",
      "########.............................#####......................",
      "................................................................",
      "................................................................",
      "################################################################"
    ],
    [
      "........................................................................",
      "..C....................................................C...............F",
      "..........####......................#####...............................",
      "........................................................................",
      "...............#####....................................................",
      "..........................................#####........................",
      "#######################################################################"
    ],
    [
      "............................................................F..........",
      ".............C...............................................###.......",
      "........##########....................................................",
      ".....................................................#####............",
      "......................#####.................................C..........",
      "#######################################################################"
    ],
  ],
  # worlds 2‑5 are autogenerated micro levels for brevity
]

def auto_worlds(base_worlds, worlds=5, levels_each=3, length=60):
    while len(base_worlds) < worlds:
        w = []
        for _ in range(levels_each):
            rows = []
            for y in range(8):
                if y == 7:
                    rows.append("#"*length)
                elif y == 6 and random.random()<0.3:
                    rows.append("".join(random.choice("#.") for _ in range(length)))
                else:
                    rows.append("."*length)
            # sprinkle coins & flag
            rows[1] = rows[1][:length-2]+"C."
            rows[0] = rows[0][:length-2]+"F."
            w.append(rows)
        base_worlds.append(w)
auto_worlds(WORLD_DATA)

# ---------- simple sine‑tone “OST” (optional) ----------
try:
    pygame.mixer.init()
    def tone(freq, ms=100):
        sample_rate=22050
        n=int(sample_rate*ms/1000)
        buf=bytearray()
        for i in range(n):
            val=int(32767*0.2*math.sin(2*math.pi*freq*i/sample_rate))
            buf+=val.to_bytes(2,byteorder='little',signed=True)
        return pygame.mixer.Sound(buffer=buf)
    SFX_JUMP = tone(880,120)
    SFX_COIN = tone(1320,120)
except pygame.error:
    SFX_JUMP=SFX_COIN=None

# ---------- classes ----------
class Player(pygame.sprite.Sprite):
    def __init__(self, pos):
        super().__init__()
        self.image = solid(PAL["player"])
        self.rect  = self.image.get_rect(topleft=pos)
        self.vel   = pygame.Vector2(0,0)
        self.on_ground = False
    def update(self, tiles):
        keys = pygame.key.get_pressed()
        self.vel.x = (keys[pygame.K_RIGHT]-keys[pygame.K_LEFT])*4
        if keys[pygame.K_z] and self.on_ground:
            self.vel.y = -10
            if SFX_JUMP: SFX_JUMP.play()
        self.vel.y += GRAVITY
        # horizontal
        self.rect.x += self.vel.x
        self.collide(tiles,'x')
        # vertical
        self.rect.y += self.vel.y
        self.on_ground=False
        self.collide(tiles,'y')
    def collide(self,tiles,dir):
        for t in tiles:
            if self.rect.colliderect(t):
                if dir=='x':
                    self.rect.x = t.right if self.vel.x<0 else t.left-self.rect.width
                else:
                    if self.vel.y>0:
                        self.rect.bottom = t.top
                        self.on_ground=True
                    else:
                        self.rect.top = t.bottom
                    self.vel.y=0

class Level:
    def __init__(self, grid):
        self.grid = grid
        self.w = len(grid[0])
        self.h = len(grid)
        # build rects
        self.tiles=[]
        self.coins=[]
        self.flag=None
        for y,row in enumerate(grid):
            for x,ch in enumerate(row):
                if ch=="#":
                    self.tiles.append(pygame.Rect(x*TILE,y*TILE,TILE,TILE))
                elif ch=="C":
                    self.coins.append(pygame.Rect(x*TILE+8,y*TILE+8,16,16))
                elif ch=="F":
                    self.flag = pygame.Rect(x*TILE,y*TILE,32,64)
    def draw(self,screen,camera):
        for rect in self.tiles:
            screen.blit(IMG["#"],camera.apply(rect))
        for rect in self.coins:
            screen.blit(IMG["C"],camera.apply(rect))
        if self.flag:
            screen.blit(IMG["F"],camera.apply(self.flag))

class Camera:
    def __init__(self):
        self.offset = pygame.Vector2(0,0)
    def follow(self, player):
        target_x = player.rect.centerx - SCROLL_EDGE
        if target_x>self.offset.x:
            self.offset.x = target_x
    def apply(self, rect):
        return rect.move(-int(self.offset.x), -int(self.offset.y))

# ---------- game shell ----------
class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode((WIDTH,HEIGHT))
        pygame.display.set_caption("Python Mario Vibes")
        self.clock = pygame.time.Clock()
        self.world = 0
        self.level = 0
        self.load_level()
    def load_level(self):
        grid = WORLD_DATA[self.world][self.level]
        self.level_obj = Level(grid)
        # Find a valid spawn position (on ground)
        spawn_x, spawn_y = TILE*2, HEIGHT-3*TILE
        for y, row in enumerate(grid):
            for x, ch in enumerate(row):
                if ch in "#G":  # Solid tile found
                    spawn_x, spawn_y = x*TILE, (y-1)*TILE
                    break
            if spawn_x != TILE*2 or spawn_y != HEIGHT-3*TILE:
                break
        self.player = Player((spawn_x, spawn_y))
        self.camera = Camera()
        self.coins = 0
    def advance(self):
        self.level +=1
        if self.level>=3:
            self.level=0
            self.world=(self.world+1)%5
        self.load_level()
    def run(self):
        while True:
            for e in pygame.event.get():
                if e.type==pygame.QUIT: pygame.quit(); sys.exit()
                if e.type==pygame.KEYDOWN and e.key==pygame.K_ESCAPE:
                    pygame.quit(); sys.exit()
            # update
            self.player.update(self.level_obj.tiles)
            self.camera.follow(self.player)
            # coin pickup
            for c in self.level_obj.coins[:]:
                if self.player.rect.colliderect(c):
                    self.level_obj.coins.remove(c)
                    self.coins+=1
                    if SFX_COIN: SFX_COIN.play()
            # flag
            if self.level_obj.flag and self.player.rect.colliderect(self.level_obj.flag):
                self.advance()
            # draw
            self.screen.fill(PAL["sky"])
            self.level_obj.draw(self.screen,self.camera)
            self.screen.blit(self.player.image,self.camera.apply(self.player.rect))
            pygame.display.set_caption(f"W{self.world+1}-{self.level+1}  Coins:{self.coins}")
            pygame.display.flip()
            self.clock.tick(FPS)

if __name__ == "__main__":
    Game().run()
